<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

   <!-- 인증이 필요없는 경로, 로그인을 안해도 얻을수 있는것들  css,js,image등 정적 이미지들 ex)로고 -->
   <!-- 인증이 필요없는 요청 경로 설정, ** : 아래에 있는 폴더 모두 -->
   <security:http pattern="/resources/**" security="none"/>
   
   <!-- 보안 필터 체인 설정 -->
   <security:http>
      <!-- Form 인증 방식 설정, 백엔드는 이거 쓰면 안됨(form 없어서), 요청경로, jsp경로 아님 -->
   <!--    <security:form-login 
         login-page="/ch17/loginForm"
         username-parameter="mid"
         password-parameter="mpassword"
         login-processing-url="/login"
         default-target-url="/ch17/content"
         always-use-default-target="false"
         authentication-failure-url="/ch17/loginForm"/> -->
         <!-- 로그인 성공,실패할때에 내가 실행하고 싶은 요청이 있을떄 원하는 코드 실행하기 위해서 -->
      <security:form-login 
      login-page="/ch17/loginForm"
      username-parameter="mid"
      password-parameter="mpassword"
      login-processing-url="/login"
      authentication-success-handler-ref="authenticationSuccessHandler"
        authentication-failure-handler-ref="authenticationFailureHandler"/>
      
      <!-- 로그인 로그아웃은 시큐리티가 관ㄹ히 -->
      <!-- 로그아웃 설정 -->
      <!-- <security:logout
         logout-url="/logout"
         logout-success-url="/ch17/content"/> -->
      <security:logout
      logout-url="/logout"
      success-handler-ref="logoutSuccessHandler"/>
      
      <!-- 사이트간 요청 위조 방지 비활성화 -->
      <security:csrf disabled="true"/>
      
      <!-- 요청 url 권한 설정, 요청 권한 가로채서 체크 -->
      <security:intercept-url pattern="/ch17/admin*" access="hasRole('ROLE_ADMIN')"/>
      <security:intercept-url pattern="/ch17/manager*" access="hasRole('ROLE_MANAGER')"/><!-- 매니저만 허가 -->
      <security:intercept-url pattern="/ch17/user*" access="isAuthenticated()"/><!-- 로그인되면 허가, 로그인이 필요해! -->
      <!-- 보안 필터 내부에는 있지만 로그인 인증은 필요없음 -->
      <security:intercept-url pattern="/**" access="permitAll"/><!-- 모든걸 허가, 로그인 필요없음-->
      
      <!-- 권한이 없을 경우 보여줄 페이지 설정 -->
      <security:access-denied-handler error-page="/ch17/error403"/><!-- 403은 권한이 없는 사람이 요청 할때 -->
      
        <!-- 로그인 중복 방지를 위한 설정 -->
         <security:session-management>
            <!-- 
            max-sessions: 최대 로그인 수
            error-if-maximum-exceeded="true": 다른 곳에서 로그인을 할 수 없음
            expired-url: 인증이 무료화된 사용자가 이동하는 페이지
            -->
            
            <!-- 이전 로그인을 유효하게 만들기 -->
            <!-- 
            <security:concurrency-control max-sessions="1"
                                   error-if-maximum-exceeded="true"/>
            -->
            
            <!-- 최종 로그인을 유효하게 만들기 -->
            <security:concurrency-control max-sessions="1"
                                   error-if-maximum-exceeded="false"
                                   expired-url="/ch17/loginForm"/>
         </security:session-management>
      </security:http>
      <!-- 인증 관리자 설정(아이디와 패스워드를 DB와 비교해서 로그인 처리 관리) -->
      <security:authentication-manager>
         <security:authentication-provider ref="daoAuthenticationProvider"/>
      </security:authentication-manager>
       
       <!-- 인증 제공자 설정 및 사용자 정보 가져오기 -->
     <!--  <bean id="daoAuthenticationProvider"
           class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
         <property name="userDetailsService" ref="jdbcUserService"/>
         <property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
      </bean> -->
      <!-- <bean id="daoAuthenticationProvider"
           class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
         <property name="userDetailsService" ref="jdbcUserService"/>
         <property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
         <property name="passwordEncoder" ref="bcryptPasswordEncorder"/>
      </bean> -->
      
      <!-- <bean id="bcryptPasswordEncorder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean> -->
      
      <!--  mid, mpassword, menabled : 인증하기 위해서 , 순서 지켜야함 인에이블 휴면계정인지 아닌지-->
      <!-- mid, mrole -->
      <!-- <security:jdbc-user-service 
         id="jdbcUserService"
         data-source-ref="dataSource"
         users-by-username-query="SELECT mid, mpassword, menabled FROM member WHERE mid=?"
         authorities-by-username-query="SELECT mid, mrole FROM member WHERE mid=?"/> --><!-- 권한에 대한 정보 가져옴 -->
         <bean id="daoAuthenticationProvider"
              class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
            <property name="userDetailsService" ref="ch17UserDetailsService"/>
            <property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
         </bean>
         
      <!-- 권한 계층 설정 -->
      <bean id="roleHierarchyAuthoritiesMapper"
           class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
         <constructor-arg ref="roleHierarchyImpl"/>
      </bean>   
      <bean id="roleHierarchyImpl" 
           class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
         <property name="hierarchy">
            <value>
               ROLE_ADMIN > ROLE_MANAGER
               ROLE_MANAGER > ROLE_USER
            </value>
         </property>
      </bean>  
      <bean id="authenticationSuccessHandler" class="com.mycompany.webapp.security.Ch17AuthenticationSuccessHandler">
         <property name="alwaysUseDefaultTargetUrl" value="false"></property>
         <property name="defaultTargetUrl" value="/ch17/content"></property>
      </bean>
      <bean id="authenticationFailureHandler" class="com.mycompany.webapp.security.Ch17AuthenticationFailureHandler">
         <property name="defaultFailureUrl" value="/ch17/loginForm"></property>
      </bean>
      <bean id="logoutSuccessHandler" class="com.mycompany.webapp.security.Ch17LogoutSuccessHandler">
         <property name="defaultTargetUrl" value="/ch17/content"></property>
      </bean>
</beans>